@page "/boten/{id:int}"
@attribute [Authorize(Roles = "Materiaalcommissaris")]
@using Kbs.Business.Boat
@using Kbs.Business.BoatType
@using Kbs.Business.Damage
@using Kbs.Business.Reservation
@using Kbs.Business.User
@inject IBoatRepository BoatRepository
@inject IBoatTypeRepository BoatTypeRepository
@inject IReservationRepository ReservationRepository
@inject IUserRepository UserRepository
@inject IDamageRepository DamageRepository
@inject NotificationService NotificationService

<div class="row">
    <h1>Boot @_boat.BoatId</h1>
    <div class="col-2">
        <button @onclick="UpdateBoat" class="btn btn-primary">Informatie updaten</button>
    </div>
    <div class="col-2">
        <a class="btn btn-primary" href="/beschadigingen/aanmaken/@_boat.BoatId">Beschadiging uploaden</a>
    </div>
</div>

<div class="row">
    <div class="col-6 row">

        <b class="col-3">Naam:</b>
        <div class="col-9">
            <input type="text" class="w-100 form-control" @bind="@_boat.Name">
            <span class="text-danger">@_nameMessage</span>
        </div>

        <b class="col-3">Status:</b>
        <div class="col-9">
            <select class="form-control w-100" @onchange="e => { if (Enum.TryParse(e.Value?.ToString(), out BoatStatus status)) { _boat.Status = status; }}">
                @foreach (var status in Enum.GetValues<BoatStatus>())
                {
                    @if (status == _boat.Status)
                    {
                        <option selected="selected" value="@((int)status)">@status.ToDutchString()</option>
                    }
                    else
                    {
                        <option value="@((int)status)">@status.ToDutchString()</option>
                    }
                }
            </select>
            <span class="text-danger">@_statusMessage</span>
        </div>

        <b class="col-3">Verwijder datum:</b>
        @if (_boat.DeleteRequestDate == null)
        {
            <i class="col-9">Niet van toepassing</i>
        }
        else
        {
            <span class="col-9">@(_boat.DeleteRequestDate.Value.ToDutchString())</span>
        }

        <b class="col-3">Boottype:</b>
        <div class="col-9">
            <select class="form-control w-100" @onchange="e => { if (int.TryParse(e.Value?.ToString(), out var boatTypeId)) { _boat.BoatTypeId = boatTypeId; }}">
                @foreach (var boatType in BoatTypeRepository.GetAll())
                {
                    @if (boatType.BoatTypeId == _boat.BoatTypeId)
                    {
                        <option selected="selected" value="@(boatType.BoatTypeId)">@boatType.Name</option>
                    }
                    else
                    {
                        <option value="@(boatType.BoatTypeId)">@boatType.Name</option>
                    }
                }
            </select>
        </div>

        <span class="text-danger">@_boatTypeMessage</span>
    </div>

    <div class="col-6">
        <h3>Reserveringen</h3>
        <table class="table">
            <thead>
            <tr>
                <th>Starttijd</th>
                <th>Eindtijd</th>
                <th>Boot</th>
                <th>Gebruiker</th>
                <th>Status</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var reservation in _reservations)
            {
                var boat = BoatRepository.GetById(reservation.BoatId);
                var user = UserRepository.GetById(reservation.UserId);
                <tr>
                    <td>
                        @reservation.StartTime.ToDutchString(true)
                    </td>
                    <td>@reservation.EndTime.ToDutchString(true)</td>
                    <td>
                        <a href="/boten/@boat.BoatId">
                            @boat.Name
                        </a>
                    </td>

                    <td>
                        @(user.Name ?? user.Email)
                    </td>
                    <td>@reservation.Status.ToDutchString()</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

</div>

<hr class="border w-100"/>

<div class="row">
    <h3>Beschadigingen</h3>
</div>

<div class="row d-flex align-items-center justify-content-start">
    <div style="width: 20px;">
        <input type="checkbox" class="form-check" @onchange="DamageSelectionChanged"/>
    </div>
    <div class="col-4">
        <span>Toon alle opgeloste beschadigingen</span>
    </div>
</div>

<div class="row d-flex">
    @foreach (var damage in _damages)
    {
        <div class="card m-2" style="width: 22%;">
            <img class="card-img-top" height="250" style="object-fit: cover" src="@damage.Image.ToHtmlImageSource()" alt="Card image cap">
            <div class="card-body">
                <h5 class="card-title">@damage.Date.ToDutchString()</h5>
                <a href="/beschadigingen/@damage.DamageId" class="btn btn-primary">Details</a>
            </div>
        </div>
    }
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    private BoatEntity _boat = new();
    private List<ReservationEntity> _reservations = new();
    private List<DamageEntity> _damages = new();

    private string _nameMessage;
    private string _statusMessage;
    private string _boatTypeMessage;
    private BoatValidator _boatValidator;

    protected override void OnInitialized()
    {
        _boat = BoatRepository.GetById(Id);
        _boatValidator = new(BoatTypeRepository);
        _reservations = ReservationRepository.GetByBoatId(_boat.BoatId);
        DamageSelectionChanged(new ChangeEventArgs());
    }

    private void DamageSelectionChanged(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool showSolved) && showSolved)
        {
            _damages = DamageRepository.GetSolvedByBoat(_boat);
        }
        else
        {
            _damages = DamageRepository.GetByBoat(_boat);
        }
    }

    private async Task UpdateBoat()
    {
        var validationResult = _boatValidator.ValidateForUpdate(_boat);
        validationResult.TryGetValue(nameof(_boat.Name), out _nameMessage);
        validationResult.TryGetValue(nameof(_boat.Status), out _statusMessage);
        validationResult.TryGetValue(nameof(_boat.BoatTypeId), out _boatTypeMessage);
        if (validationResult.Count == 0)
        {
            BoatRepository.Update(_boat);
            await NotificationService.ShowSuccessNotification("Succesvol geüpdatet!");
        }
    }
}