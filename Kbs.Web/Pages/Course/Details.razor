@page "/parcours/{id:int}"
@attribute [Authorize(Roles = "Wedstrijdcommissaris")]
@using Kbs.Business.Course
@using Kbs.Business.Game
@using Kbs.Data.Game
@using System.Text
@inject ICourseRepository CourseRepository
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IGameRepository GameRepository
<div class="row">
    <h1>Parcours @_course.CourseId</h1>
    <div class="col-2">
        <button @onclick="Update" class="btn btn-primary">Informatie updaten</button>
    </div>
    <div class="col-2">
        <button @onclick="Delete" class="btn btn-danger">Verwijderen</button>
    </div>
</div>

<div class="row">
    <div class="col-6">
        <div class="row">
            <b class="col-3">Naam:</b>
            <div class="col-9">
                <input type="text" class="form-control" @bind="_course.Name"/>
                <span class="text-danger">@_nameMessage</span>
            </div>

            <b class="col-3">Moeilijkheid:</b>
            <div class="col-9">
                <select class="form-control w-100">
                    @foreach (var difficulty in Enum.GetValues<CourseDifficulty>())
                    {
                        if (difficulty == _course.Difficulty)
                        {
                            <option selected value="@difficulty">@difficulty.ToDutchString()</option>
                        }
                        else
                        {
                            <option value="@difficulty">@difficulty.ToDutchString()</option>
                        }
                    }
                </select>
                <span class="text-danger">@_difficultyMessage</span>
            </div>

            <b class="col-3">Beschrijving:</b>
            <div class="col-12">
                <textarea class="w-100">@_course.Description</textarea>
            </div>
        </div>
    </div>

    <div class="col-6">
        <div class="row">
            <div class="col-2">
                <InputFile AdditionalAttributes="FileInputAttributes" OnChange="UpdateImage"/>
            </div>
            <span class="text-danger col-10">@_imageMessage</span>
            <img class="col-12" style="object-fit: cover;" alt="Een foto van het parcours" width="700" height="700" src="@_course.Image.ToHtmlImageSource()"/>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    private CourseEntity _course = new();
    private readonly CourseValidator _courseValidator = new();
    private string _nameMessage;
    private string _difficultyMessage;
    private string _imageMessage;

    private static readonly IDictionary<string, object> FileInputAttributes = new Dictionary<string, object>()
    {
        { "class", "form-control"}
    };

    protected override void OnInitialized()
    {
        _course = CourseRepository.GetById(Id);
    }

    private async Task Update()
    {
        var validationResult = _courseValidator.ValidateForUpdate(_course);
        validationResult.TryGetValue(nameof(_course.Name), out _nameMessage);
        validationResult.TryGetValue(nameof(_course.Difficulty), out _difficultyMessage);
        validationResult.TryGetValue(nameof(_course.Image), out _imageMessage);
        if (validationResult.Count == 0)
        {
            CourseRepository.Update(_course);
            await NotificationService.ShowSuccessNotification("Succesvol geüpdatet");
        }
    }

    private async Task UpdateImage(InputFileChangeEventArgs obj)
    {
        _course.Image = await obj.File.OpenReadStream().ToArrayAsync();
    }

    private async Task Delete()
    {
        if (await NotificationService.ShowConfirmation("Weet u zeker dat u de parcours wilt verwijderen?"))
        {
            var games = GameRepository.GetManyByCourse(_course.CourseId);
            if (games.Any())
            {
                StringBuilder sb = new("Parcours kan niet verwijderen, de volgende games zijn eraan gekoppeld:");
                foreach (GameEntity game in games)
                {
                    sb.Append(game.Name).Append(", ");
                }

                await NotificationService.ShowErrorNotification(sb.ToString());
                return;
            }
            CourseRepository.Delete(_course.CourseId);
            await NotificationService.ShowSuccessNotification("Parcours verwijderd!");
            NavigationManager.NavigateTo("/parcours");
        }
    }
}