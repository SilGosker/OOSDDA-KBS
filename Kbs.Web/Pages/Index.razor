@page "/"
@using Kbs.Business.User
@inject SessionManagerAuthenticationStateProvider LocalStorageAuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Login</PageTitle>

<div class="row col-12">
    <span>Email</span>
    <input style="width: 100%;" type="email" @bind="_userEntity.Email"/>
    <span class="text-danger">@_emailMessage</span>
</div>

<div class="row col-12 d-flex justify-content-center">
    <span>Wachtwoord</span>
    <input style="width: 100%;" type="password" @bind="_userEntity.Password"/>
    <span class="text-danger">@_passwordMessage</span>
</div>

<div class="row col-12 m-2">
    <div class="d-flex justify-content-center">
        <button class="w-50 btn btn-primary" @onclick="LoginAsync">
            Inloggen
        </button>
    </div>
</div>


@code
{
    private readonly UserEntity _userEntity = new();
    private readonly UserValidator _userValidator = new();

    private string _emailMessage;
    private string _passwordMessage;

    public async Task LoginAsync()
    {
        var validationResult = _userValidator.ValidatorForLogIn(_userEntity);
        validationResult.TryGetValue(nameof(_userEntity.Email), out _emailMessage);
        validationResult.TryGetValue(nameof(_userEntity.Password), out _passwordMessage);

        if (validationResult.Count == 0)
        {
            if (LocalStorageAuthenticationStateProvider.TryLogin(_userEntity, out var session))
            {
                if (session.User.IsMember() || session.User.IsGameCommissioner())
                {
                    NavigationManager.NavigateTo("/reserveringen");
                    return;
                }
                NavigationManager.NavigateTo("/boten");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Email of wachtwoord komen niet overeen");
            }
        }
    }

}