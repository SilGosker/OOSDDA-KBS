@page "/registreren"

@using Kbs.Business.User
@inject SessionManagerAuthenticationStateProvider LocalStorageAuthenticationStateProvider
@inject IUserRepository UserRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Registreren</PageTitle>


<div class="row">
    <div class="col-6 p-2">
        <span>Email</span>
        <input style="width: 100%;" type="email" @bind="_userEntity.Email"/>
        <span class="text-danger">@_emailMessage</span>
    </div>

    <div class="col-6 p-2">
        <span>Naam (optioneel)</span>
        <input style="width: 100%;" type="email" @bind="_userEntity.Name"/>
    </div>
</div>

<div class="row d-flex justify-content-center">
    <div class="col-6 p-2">
        <span>Wachtwoord</span>
        <input style="width: 100%;" type="password" @bind="_userEntity.Password"/>
        <span class="text-danger">@_passwordMessage</span>
    </div>
    <div class="col-6 p-2">
        <span>Herhaal Wachtwoord</span>
        <input style="width: 100%;" type="password" @bind="_repeatPassword" />
    </div>
</div>

<div class="row col-12">
    <div class="d-flex justify-content-center">
        <button class="w-50 btn btn-primary" @onclick="RegisterAsync">
            Registreren
        </button>
    </div>
</div>

@code
{
    private readonly UserEntity _userEntity = new()
    {
        Role = UserRole.Member
    };
    private readonly UserValidator _userValidator = new();

    private string _emailMessage;
    private string _passwordMessage;
    private string _repeatPassword;

    public async Task RegisterAsync()
    {
        var validationResult = _userValidator.ValidatorForRegistration(_userEntity, _repeatPassword);

        validationResult.TryGetValue(nameof(_userEntity.Email), out _emailMessage);
        validationResult.TryGetValue(nameof(_userEntity.Password), out _passwordMessage);

        if (UserRepository.GetByEmail(_userEntity.Email) != null)
        {
            _emailMessage = "Er is al een gebruiker met dit email adres";
            return;
        }

        if (validationResult.Count == 0)
        {
            var pass = _userEntity.Password;
            _userEntity.Encrypt();
            UserRepository.Create(_userEntity);
            _userEntity.Password = pass;
            if (LocalStorageAuthenticationStateProvider.TryLogin(_userEntity, out _))
            {
                NavigationManager.NavigateTo("/boten");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Email of wachtwoord komen niet overeen");
            }
        }
    }

}