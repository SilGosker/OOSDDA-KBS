@using Kbs.Business.Reservation
@inject SessionManagerAuthenticationStateProvider SessionManagerAuthenticationStateProvider
<div class="row">
    <h2 class="text-center">Selecteer een lengte</h2>
</div>

<div class="row" style="margin-botton: 8px;">

    <div class="col-3">
        <button
            class="btn btn-primary"
            @onclick="PreviousStep">
            Vorige stap
        </button>
    </div>
</div>


<div class="row">
    <div class="col-4 d-flex flex-column">
        <span>Selecteer een lengte</span>
        @{
            var end = (ReservationTime.EndTime - (_selectedStart != default
                ? _selectedStart
                : ReservationTime.StartTime.TimeOfDay)).TimeOfDay.TotalHours;

            if (!SessionManagerAuthenticationStateProvider.Session.User.IsGameCommissioner() && end > 2)
            {
                end = 2;
            }
        }

        @for (TimeSpan timespan = TimeSpan.FromMinutes(30);
            timespan.TotalHours <= end;
            timespan = timespan.Add(TimeSpan.FromMinutes(30)))
        {
            <span>
                
                @if (timespan != _selectedLength)
                {
                    <input class="form-check form-check-inline" type="radio" value="@timespan.ToString(@"hh\:mm")"
                           name="startTime" @onchange="SetLength"/>
                    @timespan.ToString(@"hh\:mm")
                }
                else
                {
                    <input checked class="form-check form-check-inline" type="radio"
                           name="startTime" @onchange="SetLength" />
                    @timespan.ToString(@"hh\:mm")
                }
                
            </span>
        }
    </div>

    <div class="col-4">
        <select @onchange="e => SetStartTime(TimeSpan.TryParse(e.Value?.ToString(), out var ts) ? ts : default)" class="form-control" title="Selecteer een starttijd">
            <option>Selecteer een starttijd</option>

            @for (TimeSpan timespan = ReservationTime.StartTime.TimeOfDay;
                timespan <= ReservationTime.EndTime.TimeOfDay.Subtract(TimeSpan.FromMinutes(30));
                timespan = timespan.Add(TimeSpan.FromMinutes(30)))
            {
                <option value="@timespan">@timespan.ToString(@"hh\:mm")</option>
            }
        </select>
        <span class="text-danger">@_errorMessage</span>
    </div>
</div>

<div class="row">
    <button class="btn btn-primary"
            @onclick="Submit">
        Bevestigen
    </button>
</div>

@code
{
    [Parameter]
    public EventCallback<ReservationTime> OnLengthSelected { get; set; }

    [Parameter]
    public EventCallback GoBack { get; set; }

    [Parameter]
    public ReservationTime ReservationTime { get; set; }

    private TimeSpan _selectedStart;
    private TimeSpan _selectedLength;
    private readonly ReservationValidator _reservationValidator = new();
    private string _errorMessage;


    public void SetStartTime(TimeSpan startTime)
    {
        _selectedStart = startTime;
        _selectedLength = default;
    }

    private async Task PreviousStep()
    {
        await GoBack.InvokeAsync();
    }

    private async Task Submit()
    {
        _errorMessage = string.Empty;

        if (_selectedLength == default || _selectedStart == default)
        {
            _errorMessage = "Selecteer een starttijd en lengte";
            return;
        }


        var start = ReservationTime.StartTime.Date.Add(_selectedStart);
        var end = start.Add(_selectedLength);
        await OnLengthSelected.InvokeAsync(new ReservationTime(start, end));
    }

    private void SetLength(ChangeEventArgs obj)
    {
        TimeSpan.TryParse(obj.Value?.ToString(), out _selectedLength);
    }
}